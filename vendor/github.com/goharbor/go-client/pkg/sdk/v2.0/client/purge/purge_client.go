// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the purge client
type API interface {
	/*
	   CreatePurgeSchedule creates a purge job schedule

	   This endpoint is for update purge job schedule.
	*/
	CreatePurgeSchedule(ctx context.Context, params *CreatePurgeScheduleParams) (*CreatePurgeScheduleCreated, error)
	/*
	   GetPurgeHistory gets purge job results

	   get purge job execution history.*/
	GetPurgeHistory(ctx context.Context, params *GetPurgeHistoryParams) (*GetPurgeHistoryOK, error)
	/*
	   GetPurgeJob gets purge job status

	   This endpoint let user get purge job status filtered by specific ID.*/
	GetPurgeJob(ctx context.Context, params *GetPurgeJobParams) (*GetPurgeJobOK, error)
	/*
	   GetPurgeJobLog gets purge job log

	   This endpoint let user get purge job logs filtered by specific ID.*/
	GetPurgeJobLog(ctx context.Context, params *GetPurgeJobLogParams) (*GetPurgeJobLogOK, error)
	/*
	   GetPurgeSchedule gets purge s schedule

	   This endpoint is for get schedule of purge job.*/
	GetPurgeSchedule(ctx context.Context, params *GetPurgeScheduleParams) (*GetPurgeScheduleOK, error)
	/*
	   StopPurge stops the specific purge audit log execution

	   Stop the purge audit log execution specified by ID*/
	StopPurge(ctx context.Context, params *StopPurgeParams) (*StopPurgeOK, error)
	/*
	   UpdatePurgeSchedule updates purge job s schedule

	   This endpoint is for update purge job schedule.
	*/
	UpdatePurgeSchedule(ctx context.Context, params *UpdatePurgeScheduleParams) (*UpdatePurgeScheduleOK, error)
}

// New creates a new purge API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for purge API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreatePurgeSchedule creates a purge job schedule

This endpoint is for update purge job schedule.
*/
func (a *Client) CreatePurgeSchedule(ctx context.Context, params *CreatePurgeScheduleParams) (*CreatePurgeScheduleCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPurgeSchedule",
		Method:             "POST",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePurgeScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePurgeScheduleCreated), nil

}

/*
GetPurgeHistory gets purge job results

get purge job execution history.
*/
func (a *Client) GetPurgeHistory(ctx context.Context, params *GetPurgeHistoryParams) (*GetPurgeHistoryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPurgeHistory",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPurgeHistoryOK), nil

}

/*
GetPurgeJob gets purge job status

This endpoint let user get purge job status filtered by specific ID.
*/
func (a *Client) GetPurgeJob(ctx context.Context, params *GetPurgeJobParams) (*GetPurgeJobOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPurgeJob",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/{purge_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeJobReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPurgeJobOK), nil

}

/*
GetPurgeJobLog gets purge job log

This endpoint let user get purge job logs filtered by specific ID.
*/
func (a *Client) GetPurgeJobLog(ctx context.Context, params *GetPurgeJobLogParams) (*GetPurgeJobLogOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPurgeJobLog",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/{purge_id}/log",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeJobLogReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPurgeJobLogOK), nil

}

/*
GetPurgeSchedule gets purge s schedule

This endpoint is for get schedule of purge job.
*/
func (a *Client) GetPurgeSchedule(ctx context.Context, params *GetPurgeScheduleParams) (*GetPurgeScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPurgeSchedule",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPurgeScheduleOK), nil

}

/*
StopPurge stops the specific purge audit log execution

Stop the purge audit log execution specified by ID
*/
func (a *Client) StopPurge(ctx context.Context, params *StopPurgeParams) (*StopPurgeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopPurge",
		Method:             "PUT",
		PathPattern:        "/system/purgeaudit/{purge_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopPurgeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopPurgeOK), nil

}

/*
UpdatePurgeSchedule updates purge job s schedule

This endpoint is for update purge job schedule.
*/
func (a *Client) UpdatePurgeSchedule(ctx context.Context, params *UpdatePurgeScheduleParams) (*UpdatePurgeScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePurgeSchedule",
		Method:             "PUT",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePurgeScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePurgeScheduleOK), nil

}
