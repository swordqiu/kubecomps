// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the member client
type API interface {
	/*
	   CreateProjectMember creates project member

	   Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group. */
	CreateProjectMember(ctx context.Context, params *CreateProjectMemberParams) (*CreateProjectMemberCreated, error)
	/*
	   DeleteProjectMember deletes project member*/
	DeleteProjectMember(ctx context.Context, params *DeleteProjectMemberParams) (*DeleteProjectMemberOK, error)
	/*
	   GetProjectMember gets the project member information

	   Get the project member information*/
	GetProjectMember(ctx context.Context, params *GetProjectMemberParams) (*GetProjectMemberOK, error)
	/*
	   ListProjectMembers gets all project member information

	   Get all project member information*/
	ListProjectMembers(ctx context.Context, params *ListProjectMembersParams) (*ListProjectMembersOK, error)
	/*
	   UpdateProjectMember updates project member

	   Update project member relationship*/
	UpdateProjectMember(ctx context.Context, params *UpdateProjectMemberParams) (*UpdateProjectMemberOK, error)
}

// New creates a new member API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for member API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateProjectMember creates project member

Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group.
*/
func (a *Client) CreateProjectMember(ctx context.Context, params *CreateProjectMemberParams) (*CreateProjectMemberCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectMember",
		Method:             "POST",
		PathPattern:        "/projects/{project_name_or_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectMemberCreated), nil

}

/*
DeleteProjectMember deletes project member
*/
func (a *Client) DeleteProjectMember(ctx context.Context, params *DeleteProjectMemberParams) (*DeleteProjectMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectMember",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProjectMemberOK), nil

}

/*
GetProjectMember gets the project member information

Get the project member information
*/
func (a *Client) GetProjectMember(ctx context.Context, params *GetProjectMemberParams) (*GetProjectMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectMember",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectMemberOK), nil

}

/*
ListProjectMembers gets all project member information

Get all project member information
*/
func (a *Client) ListProjectMembers(ctx context.Context, params *ListProjectMembersParams) (*ListProjectMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjectMembers",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectMembersOK), nil

}

/*
UpdateProjectMember updates project member

Update project member relationship
*/
func (a *Client) UpdateProjectMember(ctx context.Context, params *UpdateProjectMemberParams) (*UpdateProjectMemberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectMember",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProjectMemberOK), nil

}
