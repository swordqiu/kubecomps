// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the scan data export client
type API interface {
	/*
	   DownloadScanData downloads the scan data export file

	   Download the scan data report. Default format is CSV*/
	DownloadScanData(ctx context.Context, params *DownloadScanDataParams, writer io.Writer) (*DownloadScanDataOK, error)
	/*
	   ExportScanData exports scan data for selected projects

	   Export scan data for selected projects*/
	ExportScanData(ctx context.Context, params *ExportScanDataParams) (*ExportScanDataOK, error)
	/*
	   GetScanDataExportExecution gets the specific scan data export execution

	   Get the scan data export execution specified by ID*/
	GetScanDataExportExecution(ctx context.Context, params *GetScanDataExportExecutionParams) (*GetScanDataExportExecutionOK, error)
	/*
	   GetScanDataExportExecutionList gets a list of specific scan data export execution jobs for a specified user

	   Get a list of specific scan data export execution jobs for a specified user*/
	GetScanDataExportExecutionList(ctx context.Context, params *GetScanDataExportExecutionListParams) (*GetScanDataExportExecutionListOK, error)
}

// New creates a new scan data export API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for scan data export API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DownloadScanData downloads the scan data export file

Download the scan data report. Default format is CSV
*/
func (a *Client) DownloadScanData(ctx context.Context, params *DownloadScanDataParams, writer io.Writer) (*DownloadScanDataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadScanData",
		Method:             "GET",
		PathPattern:        "/export/cve/download/{execution_id}",
		ProducesMediaTypes: []string{"text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadScanDataReader{formats: a.formats, writer: writer},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DownloadScanDataOK), nil

}

/*
ExportScanData exports scan data for selected projects

Export scan data for selected projects
*/
func (a *Client) ExportScanData(ctx context.Context, params *ExportScanDataParams) (*ExportScanDataOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportScanData",
		Method:             "POST",
		PathPattern:        "/export/cve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportScanDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportScanDataOK), nil

}

/*
GetScanDataExportExecution gets the specific scan data export execution

Get the scan data export execution specified by ID
*/
func (a *Client) GetScanDataExportExecution(ctx context.Context, params *GetScanDataExportExecutionParams) (*GetScanDataExportExecutionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanDataExportExecution",
		Method:             "GET",
		PathPattern:        "/export/cve/execution/{execution_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScanDataExportExecutionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanDataExportExecutionOK), nil

}

/*
GetScanDataExportExecutionList gets a list of specific scan data export execution jobs for a specified user

Get a list of specific scan data export execution jobs for a specified user
*/
func (a *Client) GetScanDataExportExecutionList(ctx context.Context, params *GetScanDataExportExecutionListParams) (*GetScanDataExportExecutionListOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanDataExportExecutionList",
		Method:             "GET",
		PathPattern:        "/export/cve/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScanDataExportExecutionListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanDataExportExecutionListOK), nil

}
