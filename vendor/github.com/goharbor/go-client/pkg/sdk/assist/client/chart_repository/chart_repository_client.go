// Code generated by go-swagger; DO NOT EDIT.

package chart_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the chart repository client
type API interface {
	/*
	   DeleteChartrepoRepoChartsName deletes all the versions of the specified chart

	   Delete all the versions of the specified chart*/
	DeleteChartrepoRepoChartsName(ctx context.Context, params *DeleteChartrepoRepoChartsNameParams) (*DeleteChartrepoRepoChartsNameOK, error)
	/*
	   DeleteChartrepoRepoChartsNameVersion deletes the specified chart version

	   Delete the specified chart version*/
	DeleteChartrepoRepoChartsNameVersion(ctx context.Context, params *DeleteChartrepoRepoChartsNameVersionParams) (*DeleteChartrepoRepoChartsNameVersionOK, error)
	/*
	   GetChartrepoHealth checks the health of chart repository service

	   Check the health of chart repository service.*/
	GetChartrepoHealth(ctx context.Context, params *GetChartrepoHealthParams) (*GetChartrepoHealthOK, error)
	/*
	   GetChartrepoRepoCharts gets all the charts under the specified project

	   Get all the charts under the specified project*/
	GetChartrepoRepoCharts(ctx context.Context, params *GetChartrepoRepoChartsParams) (*GetChartrepoRepoChartsOK, error)
	/*
	   GetChartrepoRepoChartsName gets all the versions of the specified chart

	   Get all the versions of the specified chart*/
	GetChartrepoRepoChartsName(ctx context.Context, params *GetChartrepoRepoChartsNameParams) (*GetChartrepoRepoChartsNameOK, error)
	/*
	   GetChartrepoRepoChartsNameVersion gets the specified chart version

	   Get the specified chart version*/
	GetChartrepoRepoChartsNameVersion(ctx context.Context, params *GetChartrepoRepoChartsNameVersionParams) (*GetChartrepoRepoChartsNameVersionOK, error)
	/*
	   PostChartrepoCharts uploads a chart file to the defult library project

	   Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.*/
	PostChartrepoCharts(ctx context.Context, params *PostChartrepoChartsParams) (*PostChartrepoChartsCreated, error)
	/*
	   PostChartrepoRepoCharts uploads a chart file to the specified project

	   Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.*/
	PostChartrepoRepoCharts(ctx context.Context, params *PostChartrepoRepoChartsParams) (*PostChartrepoRepoChartsCreated, error)
	/*
	   PostChartrepoRepoProv uploads a provance file to the specified project

	   Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.*/
	PostChartrepoRepoProv(ctx context.Context, params *PostChartrepoRepoProvParams) (*PostChartrepoRepoProvCreated, error)
}

// New creates a new chart repository API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for chart repository API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteChartrepoRepoChartsName deletes all the versions of the specified chart

Delete all the versions of the specified chart
*/
func (a *Client) DeleteChartrepoRepoChartsName(ctx context.Context, params *DeleteChartrepoRepoChartsNameParams) (*DeleteChartrepoRepoChartsNameOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteChartrepoRepoChartsName",
		Method:             "DELETE",
		PathPattern:        "/chartrepo/{repo}/charts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteChartrepoRepoChartsNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteChartrepoRepoChartsNameOK), nil

}

/*
DeleteChartrepoRepoChartsNameVersion deletes the specified chart version

Delete the specified chart version
*/
func (a *Client) DeleteChartrepoRepoChartsNameVersion(ctx context.Context, params *DeleteChartrepoRepoChartsNameVersionParams) (*DeleteChartrepoRepoChartsNameVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteChartrepoRepoChartsNameVersion",
		Method:             "DELETE",
		PathPattern:        "/chartrepo/{repo}/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteChartrepoRepoChartsNameVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteChartrepoRepoChartsNameVersionOK), nil

}

/*
GetChartrepoHealth checks the health of chart repository service

Check the health of chart repository service.
*/
func (a *Client) GetChartrepoHealth(ctx context.Context, params *GetChartrepoHealthParams) (*GetChartrepoHealthOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoHealth",
		Method:             "GET",
		PathPattern:        "/chartrepo/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoHealthReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChartrepoHealthOK), nil

}

/*
GetChartrepoRepoCharts gets all the charts under the specified project

Get all the charts under the specified project
*/
func (a *Client) GetChartrepoRepoCharts(ctx context.Context, params *GetChartrepoRepoChartsParams) (*GetChartrepoRepoChartsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoCharts",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChartrepoRepoChartsOK), nil

}

/*
GetChartrepoRepoChartsName gets all the versions of the specified chart

Get all the versions of the specified chart
*/
func (a *Client) GetChartrepoRepoChartsName(ctx context.Context, params *GetChartrepoRepoChartsNameParams) (*GetChartrepoRepoChartsNameOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoChartsName",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChartrepoRepoChartsNameOK), nil

}

/*
GetChartrepoRepoChartsNameVersion gets the specified chart version

Get the specified chart version
*/
func (a *Client) GetChartrepoRepoChartsNameVersion(ctx context.Context, params *GetChartrepoRepoChartsNameVersionParams) (*GetChartrepoRepoChartsNameVersionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChartrepoRepoChartsNameVersion",
		Method:             "GET",
		PathPattern:        "/chartrepo/{repo}/charts/{name}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChartrepoRepoChartsNameVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChartrepoRepoChartsNameVersionOK), nil

}

/*
PostChartrepoCharts uploads a chart file to the defult library project

Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.
*/
func (a *Client) PostChartrepoCharts(ctx context.Context, params *PostChartrepoChartsParams) (*PostChartrepoChartsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoCharts",
		Method:             "POST",
		PathPattern:        "/chartrepo/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoChartsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChartrepoChartsCreated), nil

}

/*
PostChartrepoRepoCharts uploads a chart file to the specified project

Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
*/
func (a *Client) PostChartrepoRepoCharts(ctx context.Context, params *PostChartrepoRepoChartsParams) (*PostChartrepoRepoChartsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoRepoCharts",
		Method:             "POST",
		PathPattern:        "/chartrepo/{repo}/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoRepoChartsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChartrepoRepoChartsCreated), nil

}

/*
PostChartrepoRepoProv uploads a provance file to the specified project

Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
*/
func (a *Client) PostChartrepoRepoProv(ctx context.Context, params *PostChartrepoRepoProvParams) (*PostChartrepoRepoProvCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChartrepoRepoProv",
		Method:             "POST",
		PathPattern:        "/chartrepo/{repo}/prov",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostChartrepoRepoProvReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChartrepoRepoProvCreated), nil

}
