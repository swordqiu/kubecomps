// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the label client
type API interface {
	/*
	   CreateLabel posts creates a label

	   This endpoint let user creates a label.
	*/
	CreateLabel(ctx context.Context, params *CreateLabelParams) (*CreateLabelCreated, error)
	/*
	   DeleteLabel deletes the label specified by ID

	   Delete the label specified by ID.
	*/
	DeleteLabel(ctx context.Context, params *DeleteLabelParams) (*DeleteLabelOK, error)
	/*
	   GetLabelByID gets the label specified by ID

	   This endpoint let user get the label by specific ID.
	*/
	GetLabelByID(ctx context.Context, params *GetLabelByIDParams) (*GetLabelByIDOK, error)
	/*
	   ListLabels lists labels according to the query strings

	   This endpoint let user list labels by name, scope and project_id
	*/
	ListLabels(ctx context.Context, params *ListLabelsParams) (*ListLabelsOK, error)
	/*
	   UpdateLabel updates the label properties

	   This endpoint let user update label properties.
	*/
	UpdateLabel(ctx context.Context, params *UpdateLabelParams) (*UpdateLabelOK, error)
}

// New creates a new label API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for label API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateLabel posts creates a label

This endpoint let user creates a label.
*/
func (a *Client) CreateLabel(ctx context.Context, params *CreateLabelParams) (*CreateLabelCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLabel",
		Method:             "POST",
		PathPattern:        "/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLabelCreated), nil

}

/*
DeleteLabel deletes the label specified by ID

Delete the label specified by ID.
*/
func (a *Client) DeleteLabel(ctx context.Context, params *DeleteLabelParams) (*DeleteLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLabel",
		Method:             "DELETE",
		PathPattern:        "/labels/{label_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLabelOK), nil

}

/*
GetLabelByID gets the label specified by ID

This endpoint let user get the label by specific ID.
*/
func (a *Client) GetLabelByID(ctx context.Context, params *GetLabelByIDParams) (*GetLabelByIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLabelByID",
		Method:             "GET",
		PathPattern:        "/labels/{label_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLabelByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLabelByIDOK), nil

}

/*
ListLabels lists labels according to the query strings

This endpoint let user list labels by name, scope and project_id
*/
func (a *Client) ListLabels(ctx context.Context, params *ListLabelsParams) (*ListLabelsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLabels",
		Method:             "GET",
		PathPattern:        "/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListLabelsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLabelsOK), nil

}

/*
UpdateLabel updates the label properties

This endpoint let user update label properties.
*/
func (a *Client) UpdateLabel(ctx context.Context, params *UpdateLabelParams) (*UpdateLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateLabel",
		Method:             "PUT",
		PathPattern:        "/labels/{label_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLabelOK), nil

}
