// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the quota client
type API interface {
	/*
	   GetQuota gets the specified quota

	   Get the specified quota*/
	GetQuota(ctx context.Context, params *GetQuotaParams) (*GetQuotaOK, error)
	/*
	   ListQuotas lists quotas

	   List quotas*/
	ListQuotas(ctx context.Context, params *ListQuotasParams) (*ListQuotasOK, error)
	/*
	   UpdateQuota updates the specified quota

	   Update hard limits of the specified quota*/
	UpdateQuota(ctx context.Context, params *UpdateQuotaParams) (*UpdateQuotaOK, error)
}

// New creates a new quota API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for quota API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetQuota gets the specified quota

Get the specified quota
*/
func (a *Client) GetQuota(ctx context.Context, params *GetQuotaParams) (*GetQuotaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQuota",
		Method:             "GET",
		PathPattern:        "/quotas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQuotaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQuotaOK), nil

}

/*
ListQuotas lists quotas

List quotas
*/
func (a *Client) ListQuotas(ctx context.Context, params *ListQuotasParams) (*ListQuotasOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listQuotas",
		Method:             "GET",
		PathPattern:        "/quotas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListQuotasReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListQuotasOK), nil

}

/*
UpdateQuota updates the specified quota

Update hard limits of the specified quota
*/
func (a *Client) UpdateQuota(ctx context.Context, params *UpdateQuotaParams) (*UpdateQuotaOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateQuota",
		Method:             "PUT",
		PathPattern:        "/quotas/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQuotaReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateQuotaOK), nil

}
