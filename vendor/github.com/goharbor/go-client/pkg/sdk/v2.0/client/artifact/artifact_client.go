// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the artifact client
type API interface {
	/*
	   CopyArtifact copies artifact

	   Copy the artifact specified in the "from" parameter to the repository.*/
	CopyArtifact(ctx context.Context, params *CopyArtifactParams) (*CopyArtifactCreated, error)
	/*
	   AddLabel adds label to artifact

	   Add label to the specified artiact.*/
	AddLabel(ctx context.Context, params *AddLabelParams) (*AddLabelOK, error)
	/*
	   CreateTag creates tag

	   Create a tag for the specified artifact*/
	CreateTag(ctx context.Context, params *CreateTagParams) (*CreateTagCreated, error)
	/*
	   DeleteArtifact deletes the specific artifact

	   Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag*/
	DeleteArtifact(ctx context.Context, params *DeleteArtifactParams) (*DeleteArtifactOK, error)
	/*
	   DeleteTag deletes tag

	   Delete the tag of the specified artifact*/
	DeleteTag(ctx context.Context, params *DeleteTagParams) (*DeleteTagOK, error)
	/*
	   GetAddition gets the addition of the specific artifact

	   Get the addition of the artifact specified by the reference under the project and repository.*/
	GetAddition(ctx context.Context, params *GetAdditionParams) (*GetAdditionOK, error)
	/*
	   GetArtifact gets the specific artifact

	   Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.*/
	GetArtifact(ctx context.Context, params *GetArtifactParams) (*GetArtifactOK, error)
	/*
	   GetVulnerabilitiesAddition gets the vulnerabilities addition of the specific artifact

	   Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.*/
	GetVulnerabilitiesAddition(ctx context.Context, params *GetVulnerabilitiesAdditionParams) (*GetVulnerabilitiesAdditionOK, error)
	/*
	   ListAccessories lists accessories

	   List accessories of the specific artifact*/
	ListAccessories(ctx context.Context, params *ListAccessoriesParams) (*ListAccessoriesOK, error)
	/*
	   ListArtifacts lists artifacts

	   List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to*/
	ListArtifacts(ctx context.Context, params *ListArtifactsParams) (*ListArtifactsOK, error)
	/*
	   ListTags lists tags

	   List tags of the specific artifact*/
	ListTags(ctx context.Context, params *ListTagsParams) (*ListTagsOK, error)
	/*
	   RemoveLabel removes label from artifact

	   Remove the label from the specified artiact.*/
	RemoveLabel(ctx context.Context, params *RemoveLabelParams) (*RemoveLabelOK, error)
}

// New creates a new artifact API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for artifact API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CopyArtifact copies artifact

Copy the artifact specified in the "from" parameter to the repository.
*/
func (a *Client) CopyArtifact(ctx context.Context, params *CopyArtifactParams) (*CopyArtifactCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CopyArtifact",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CopyArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CopyArtifactCreated), nil

}

/*
AddLabel adds label to artifact

Add label to the specified artiact.
*/
func (a *Client) AddLabel(ctx context.Context, params *AddLabelParams) (*AddLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addLabel",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddLabelOK), nil

}

/*
CreateTag creates tag

Create a tag for the specified artifact
*/
func (a *Client) CreateTag(ctx context.Context, params *CreateTagParams) (*CreateTagCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTag",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTagCreated), nil

}

/*
DeleteArtifact deletes the specific artifact

Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
*/
func (a *Client) DeleteArtifact(ctx context.Context, params *DeleteArtifactParams) (*DeleteArtifactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifact",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteArtifactOK), nil

}

/*
DeleteTag deletes tag

Delete the tag of the specified artifact
*/
func (a *Client) DeleteTag(ctx context.Context, params *DeleteTagParams) (*DeleteTagOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTag",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTagOK), nil

}

/*
GetAddition gets the addition of the specific artifact

Get the addition of the artifact specified by the reference under the project and repository.
*/
func (a *Client) GetAddition(ctx context.Context, params *GetAdditionParams) (*GetAdditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddition",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAdditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdditionOK), nil

}

/*
GetArtifact gets the specific artifact

Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
*/
func (a *Client) GetArtifact(ctx context.Context, params *GetArtifactParams) (*GetArtifactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifact",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArtifactOK), nil

}

/*
GetVulnerabilitiesAddition gets the vulnerabilities addition of the specific artifact

Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
*/
func (a *Client) GetVulnerabilitiesAddition(ctx context.Context, params *GetVulnerabilitiesAdditionParams) (*GetVulnerabilitiesAdditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVulnerabilitiesAddition",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVulnerabilitiesAdditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVulnerabilitiesAdditionOK), nil

}

/*
ListAccessories lists accessories

List accessories of the specific artifact
*/
func (a *Client) ListAccessories(ctx context.Context, params *ListAccessoriesParams) (*ListAccessoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAccessories",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/accessories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAccessoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAccessoriesOK), nil

}

/*
ListArtifacts lists artifacts

List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to
*/
func (a *Client) ListArtifacts(ctx context.Context, params *ListArtifactsParams) (*ListArtifactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listArtifacts",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArtifactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListArtifactsOK), nil

}

/*
ListTags lists tags

List tags of the specific artifact
*/
func (a *Client) ListTags(ctx context.Context, params *ListTagsParams) (*ListTagsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTags",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTagsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTagsOK), nil

}

/*
RemoveLabel removes label from artifact

Remove the label from the specified artiact.
*/
func (a *Client) RemoveLabel(ctx context.Context, params *RemoveLabelParams) (*RemoveLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeLabel",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveLabelOK), nil

}
