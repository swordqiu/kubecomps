// Code generated by go-swagger; DO NOT EDIT.

package robotv1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the robotv1 client
type API interface {
	/*
	   CreateRobotV1 creates a robot account

	   Create a robot account*/
	CreateRobotV1(ctx context.Context, params *CreateRobotV1Params) (*CreateRobotV1Created, error)
	/*
	   DeleteRobotV1 deletes a robot account

	   This endpoint deletes specific robot account information by robot ID.*/
	DeleteRobotV1(ctx context.Context, params *DeleteRobotV1Params) (*DeleteRobotV1OK, error)
	/*
	   GetRobotByIDV1 gets a robot account

	   This endpoint returns specific robot account information by robot ID.*/
	GetRobotByIDV1(ctx context.Context, params *GetRobotByIDV1Params) (*GetRobotByIDV1OK, error)
	/*
	   ListRobotV1 gets all robot accounts of specified project

	   Get all robot accounts of specified project*/
	ListRobotV1(ctx context.Context, params *ListRobotV1Params) (*ListRobotV1OK, error)
	/*
	   UpdateRobotV1 updates status of robot account

	   Used to disable/enable a specified robot account.*/
	UpdateRobotV1(ctx context.Context, params *UpdateRobotV1Params) (*UpdateRobotV1OK, error)
}

// New creates a new robotv1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for robotv1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateRobotV1 creates a robot account

Create a robot account
*/
func (a *Client) CreateRobotV1(ctx context.Context, params *CreateRobotV1Params) (*CreateRobotV1Created, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRobotV1",
		Method:             "POST",
		PathPattern:        "/projects/{project_name_or_id}/robots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRobotV1Reader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRobotV1Created), nil

}

/*
DeleteRobotV1 deletes a robot account

This endpoint deletes specific robot account information by robot ID.
*/
func (a *Client) DeleteRobotV1(ctx context.Context, params *DeleteRobotV1Params) (*DeleteRobotV1OK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRobotV1",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name_or_id}/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRobotV1Reader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRobotV1OK), nil

}

/*
GetRobotByIDV1 gets a robot account

This endpoint returns specific robot account information by robot ID.
*/
func (a *Client) GetRobotByIDV1(ctx context.Context, params *GetRobotByIDV1Params) (*GetRobotByIDV1OK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRobotByIDV1",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRobotByIDV1Reader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRobotByIDV1OK), nil

}

/*
ListRobotV1 gets all robot accounts of specified project

Get all robot accounts of specified project
*/
func (a *Client) ListRobotV1(ctx context.Context, params *ListRobotV1Params) (*ListRobotV1OK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRobotV1",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/robots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRobotV1Reader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRobotV1OK), nil

}

/*
UpdateRobotV1 updates status of robot account

Used to disable/enable a specified robot account.
*/
func (a *Client) UpdateRobotV1(ctx context.Context, params *UpdateRobotV1Params) (*UpdateRobotV1OK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRobotV1",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name_or_id}/robots/{robot_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRobotV1Reader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRobotV1OK), nil

}
